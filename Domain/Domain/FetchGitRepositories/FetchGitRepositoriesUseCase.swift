//
//  FetchGitRepositoriesUseCase.swift
//  Domain
//
//  Created by Victor C Tavernari on 02/04/20.
//  Copyright (c) 2020 Taverna Apps. All rights reserved.
//
//  This file was generated by BLU Clean
//

import Foundation

public protocol FetchGitRepositoriesUseCaseInterface {
    func execute(term: String)
}

public class FetchGitRepositoriesUseCase: FetchGitRepositoriesUseCaseInterface {
    public var delegateInterfaceAdapter: FetchGitRepositoriesInterfaceAdapter?
    private let gitRepoRepository: GitRepoRepositoryInterface
    private let configRepository: ConfigRepositoryInterface
    private let reliabilityCalculatorUseCase: ReliabilityRepoCalculatorUseCase

    public init(
        gitRepoRepository: GitRepoRepositoryInterface,
        configRepository: ConfigRepositoryInterface,
        reliabilityCalculatorUseCase: ReliabilityRepoCalculatorUseCase
    ) {
        self.gitRepoRepository = gitRepoRepository
        self.configRepository = configRepository
        self.reliabilityCalculatorUseCase = reliabilityCalculatorUseCase
    }

    private func handleError(_ error: Error) {
        if let error = error as? URLError {
            switch error.code {
            case URLError.Code.notConnectedToInternet:
                delegateInterfaceAdapter?.fetchFailure(withError: .common(.noInternetConnection))
            case URLError.Code.timedOut:
                delegateInterfaceAdapter?.fetchFailure(withError: .common(.timeOut))
            default:
                delegateInterfaceAdapter?.fetchFailure(withError: .common(.generic(error.localizedDescription)))
            }
        } else {
            delegateInterfaceAdapter?.fetchFailure(withError: .common(.generic(error.localizedDescription)))
        }
    }

    private func fetchRepositories(term: String, completion: @escaping ([GitRepository]) -> Void) {
        gitRepoRepository.list(term: term) { result in
            do {
                let repositories = try result.handle()
                completion(repositories)
            } catch { self.handleError(error) }
        }
    }

    private func fetchReliabilityConfig(completion: @escaping (GitRepoReliabilityMultiplier) -> Void) {
        configRepository.gitRepoReliabilityMultiplier { result in
            do {
                let repoReliabilityMultiplierModel = try result.handle()
                completion(repoReliabilityMultiplierModel)
            } catch { self.handleError(error) }
        }
    }

    public func execute(term: String) {
        guard term.isEmpty == false else {
            delegateInterfaceAdapter?.fetchFailure(withError: FetchGitRepositoriesError.termCannotBeEmpty)
            return
        }

        delegateInterfaceAdapter?.fetching()
        fetchRepositories(term: term) { repositories in
            self.fetchReliabilityConfig { repoReliabilityMultiplierModel in
                let repoResult = repositories.map { repo -> GitRepository in
                    var tempRepo = repo
                    let multiplier = repoReliabilityMultiplierModel.multiplier
                    let enable = repoReliabilityMultiplierModel.enable
                    tempRepo.isReliabilityEnabled = enable
                    let stats = repo.stats
                    tempRepo.reliabilityScore = self.reliabilityCalculatorUseCase.execute(repoStats: stats,
                                                                                          multiplier: multiplier)
                    return tempRepo
                }
                self.delegateInterfaceAdapter?.fetched(data: repoResult)
            }
        }
    }
}
