//
//  ListOfRepositoriesViewController.swift
//  Presentation
//
//  Created by Victor C Tavernari on 04/04/20.
//  Copyright (c) 2020 Taverna Apps. All rights reserved.
//
//  This file was generated by Mobiplus Clean
//

import Domain
import UIKit

class ListOfRepositoriesViewController: UIViewController {
    final class func initWith(viewModel: ListOfRepositoriesViewModel) -> ListOfRepositoriesViewController {
        let vc = ListOfRepositoriesViewController()
        vc.viewModel = viewModel
        return vc
    }

    var viewModel: ListOfRepositoriesViewModel!

    @IBOutlet private var tableView: UITableView!
    private var dataSource: [GitRepositoryModel] { viewModel.repositories.value }

    fileprivate func configTableView() {
        tableView.register(R.nib.repositoriesTableViewCell)
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 90
        tableView.delegate = self
        tableView.dataSource = self
    }

    fileprivate func populateCell(index _: Int, repository: GitRepositoryModel, cell: RepositoriesTableViewCell) {
        cell.repositoryAuthor = repository.author
        cell.repositoryName = repository.name
        cell.repositoryDescription = repository.description
        cell.repositoryImage = repository.image
        cell.repositoryForkCount = "\(repository.forkCount)"
        cell.repositoryStarCount = "\(repository.starCount)"
        cell.repositoryIssueCount = "\(repository.issuesCount)"
        cell.repositoryReliabilityIndicatorEnabled = repository.isReliabilityEnabled
        cell.repositoryReliabilityIndicator = "\(Int(repository.reliabilityScore))"
    }

    fileprivate func showError(message: String?) {
        guard let message = message else {
            return
        }

        let alert = UIAlertController(title: "Error", message: message, preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "OK", style: UIAlertAction.Style.default, handler: nil))
        present(alert, animated: true, completion: nil)
    }

    fileprivate func showLoading(_ isLoading: Bool) {
        if isLoading {
            showLoadingIndicator(text: "Loading")
        } else {
            removeLoadingIndicator()
        }
    }

    fileprivate func deselectRow(indexPath: IndexPath) {
        tableView.cellForRow(at: indexPath)?.setSelected(false, animated: true)
    }

    fileprivate func bindViewModel() {
        viewModel.isLoading.observe(listener: showLoading)
        viewModel.failMessage.observe(listener: showError)
        viewModel.repositories.observe { _ in self.tableView.reloadData() }
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        configTableView()

        title = "Repositories"
        let term = ProcessInfo.processInfo.environment["githubTerm"] ?? "swift"
        viewModel.search(term: term)
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        bindViewModel()
    }

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)

        viewModel.isLoading.removeAllObservers()
        viewModel.failMessage.removeAllObservers()
        viewModel.repositories.removeAllObservers()
    }
}

extension ListOfRepositoriesViewController: UITableViewDelegate {
    func tableView(_: UITableView, didSelectRowAt indexPath: IndexPath) {
        deselectRow(indexPath: indexPath)
        viewModel.select(index: indexPath.row)
    }
}

extension ListOfRepositoriesViewController: UITableViewDataSource {
    func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
        return dataSource.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.repositoriesTableViewCell, for: indexPath)!
        let index = indexPath.row
        let data = dataSource[index]
        populateCell(index: index, repository: data, cell: cell)
        return cell
    }
}
