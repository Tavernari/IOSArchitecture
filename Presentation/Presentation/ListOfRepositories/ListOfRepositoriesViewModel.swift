//
//  ListOfRepositoriesViewModel.swift
//  Presentation
//
//  Created by Victor C Tavernari on 04/04/20.
//  Copyright (c) 2020 Taverna Apps. All rights reserved.
//
//  This file was generated by Mobiplus Clean 
//

import Domain

class ListOfRepositoriesViewModel: ListOfRepositoriesViewModelInterface {
    var isLoading = Observable<Bool>(false)
    var failMessage = Observable<String?>(nil)
    var repositories = Observable<[GitRepository]>([])
    var route = Observable<ListOfRepositoriesViewModelRoute>(.none)

    private let fetchGitRepositoriesUseCase: FetchGitRepositoriesUseCase

    init(fetchGitRepositoriesUseCase: FetchGitRepositoriesUseCase) {
        self.fetchGitRepositoriesUseCase = fetchGitRepositoriesUseCase
    }

    func search(term: String) {
        self.fetchGitRepositoriesUseCase.execute(term: term)
    }

    func select(index: Int) {
        let repository = self.repositories.value[index]
        self.route.value = .showPullRequests(repo: repository)
    }
}

extension ListOfRepositoriesViewModel: FetchGitRepositoriesInterfaceAdapter {

    func fetching() {
        self.isLoading.value = true
    }

    func fetched(data: [GitRepository]) {
        self.isLoading.value = false
        self.repositories.value = data
    }

    fileprivate func processURLError(_ urlError: URLError) {
        self.failMessage.value = urlError.localizedDescription
    }

    func fetchFailure(withError error: FetchGitRepositoriesError) {
        switch error {
        case .termCannotBeEmpty:
            self.failMessage.value = "Term cannot be empty"
        case .common(.noInternetConnection):
            self.failMessage.value = "Caiu a internet"
        case .common(.timeOut):
            self.failMessage.value = "Time out"
        case .common(.generic(let message)):
            self.route.value = .showError(errorMessage: message)
        }

        self.isLoading.value = false
    }
}
