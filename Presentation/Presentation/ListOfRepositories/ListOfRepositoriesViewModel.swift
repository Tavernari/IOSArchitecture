//
//  ListOfRepositoriesViewModel.swift
//  Presentation
//
//  Created by Victor C Tavernari on 04/04/20.
//  Copyright (c) 2020 Taverna Apps. All rights reserved.
//
//  This file was generated by Mobiplus Clean
//

import Domain

class ListOfRepositoriesViewModel: ListOfRepositoriesViewModelInterface {
    var isLoading = Observable<Bool>(false)
    var failMessage = Observable<String?>(nil)
    var repositories = Observable<[GitRepository]>([])
    var route = Observable<ListOfRepositoriesViewModelRoute>(.none)

    private let fetchGitRepositoriesUseCase: FetchGitRepositoriesUseCase

    init(fetchGitRepositoriesUseCase: FetchGitRepositoriesUseCase) {
        self.fetchGitRepositoriesUseCase = fetchGitRepositoriesUseCase
    }

    func search(term: String) {
        fetchGitRepositoriesUseCase.execute(term: term)
    }

    func select(index: Int) {
        let repository = repositories.value[index]
        route.value = .showPullRequests(repo: repository)
    }
}

extension ListOfRepositoriesViewModel: FetchGitRepositoriesInterfaceAdapter {
    func doing() {
        isLoading.value = true
    }

    func done(data: [GitRepository]) {
        isLoading.value = false
        repositories.value = data
    }

    func failure(withError error: FetchGitRepositoriesError) {
        switch error {
        case .termCannotBeEmpty:
            failMessage.value = "Term cannot be empty"
        case .urlError(.noInternetConnection):
            failMessage.value = "Caiu a internet"
        case .urlError(.timeOut):
            failMessage.value = "Time out"
        case let .urlError(.generic(message)):
            route.value = .showError(errorMessage: message)
        }

        isLoading.value = false
    }
}
