//
//  ListOfPullRequestsViewController.swift
//  Presentation
//
//  Created by Victor C Tavernari on 04/04/20.
//  Copyright (c) 2020 Taverna Apps. All rights reserved.
//
//  This file was generated by Mobiplus Clean
//

import Domain
import UIKit

class ListOfPullRequestsViewController: UIViewController {
    final class func initWith(withViewModel viewModel: ListOfPullRequestsViewModel, andRepo repo: GitRepository) -> ListOfPullRequestsViewController {
        let vc = ListOfPullRequestsViewController()
        vc.viewModel = viewModel
        vc.repo = repo
        return vc
    }

    private(set) var viewModel: ListOfPullRequestsViewModel!
    private(set) var repo: GitRepository!

    private var dataSource: [GitPullRequest] = []

    @IBOutlet private var tableView: UITableView!

    fileprivate func configTableView() {
        tableView.register(R.nib.gitPullRequestsTableViewCell)
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 90
        tableView.delegate = self
        tableView.dataSource = self
    }

    fileprivate func populateCell(index _: Int, pullRequests: GitPullRequest, cell: GitPullRequestsTableViewCell) {
        cell.pullRequestAuthor = pullRequests.author
        cell.pullRequestImage = pullRequests.image
        cell.pullRequestTitle = pullRequests.title
        cell.pullRequestDescription = pullRequests.description
        cell.pullRequestDate = pullRequests.createdAt?.string(format: .ddMMyyyyHHmmss) ?? ""
    }

    fileprivate func showError(message: String?) {
        guard let message = message else {
            return
        }

        let alert = UIAlertController(title: "Error", message: message, preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "OK", style: UIAlertAction.Style.default, handler: nil))
        present(alert, animated: true, completion: nil)
    }

    fileprivate func deselectRow(indexPath: IndexPath) {
        tableView.cellForRow(at: indexPath)?.setSelected(false, animated: true)
    }

    fileprivate func handleLoadingView(_ value: Bool) {
        if value {
            showLoadingIndicator(text: "Loading")
        } else {
            removeLoadingIndicator()
        }
    }

    fileprivate func setDataSource(_ data: [GitPullRequest]) {
        dataSource = data
        tableView.reloadData()
    }

    fileprivate func bindViewModel() {
        viewModel.failMessage.observe(listener: showError)
        viewModel.isLoading.observe(listener: handleLoadingView)
        viewModel.pullRequests.observe(listener: setDataSource)
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        title = "\(repo.name) Pull Requests"
        configTableView()
        viewModel.load(repo: repo)
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        bindViewModel()
    }

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)

        viewModel.isLoading.removeAllObservers()
        viewModel.failMessage.removeAllObservers()
        viewModel.pullRequests.removeAllObservers()
    }
}

extension ListOfPullRequestsViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        viewModel.select(index: indexPath.row)
        deselectRow(indexPath: indexPath)
    }
}

extension ListOfPullRequestsViewController: UITableViewDataSource {
    func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
        return dataSource.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: R.reuseIdentifier.gitPullRequestsTableViewCell, for: indexPath)!
        let index = indexPath.row
        let data = dataSource[index]
        populateCell(index: index, pullRequests: data, cell: cell)
        return cell
    }
}
