//
//  ListOfPullRequestsViewModel.swift
//  Presentation
//
//  Created by Victor C Tavernari on 04/04/20.
//  Copyright (c) 2020 Taverna Apps. All rights reserved.
//
//  This file was generated by Mobiplus Clean 
//

import Domain

class ListOfPullRequestsViewModel: ListOfPullRequestsViewModelInterface {
    var route = Observable<ListOfPullRequestsViewModelRoute>(.none)
    var pullRequests = Observable<[GitPullRequest]>([])
    var isLoading = Observable<Bool>(false)
    var failMessage = Observable<String?>(nil)

    private let listPullRequestsUseCase: FetchPullRequestsUseCaseInterface
    init(listPullRequestsUseCase: FetchPullRequestsUseCaseInterface) {
        self.listPullRequestsUseCase = listPullRequestsUseCase
    }

    private var gitRepository: GitRepository!

    func load(repo: GitRepository) {
        self.gitRepository = repo
        self.listPullRequestsUseCase.execute(repo: repo)
    }

    func select(index: Int) {
        let pullRequest = self.pullRequests.value[index]
        self.route.value = .showPullRequestDetail(id: pullRequest.id, repo: gitRepository)
    }
}

extension ListOfPullRequestsViewModel: FetchPullRequestsInterfaceAdapter {
    func doing() {
        self.isLoading.value = true
    }

    func done(data: [GitPullRequest]) {
        self.pullRequests.value = data
        self.isLoading.value = false
    }

    func failure(error: Error) {
        self.failMessage.value = error.localizedDescription
    }

}
