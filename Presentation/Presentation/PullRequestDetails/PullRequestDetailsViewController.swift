//
//  PullRequestDetailsViewController.swift
//  Presentation
//
//  Created by Victor C Tavernari on 05/04/20.
//  Copyright (c) 2020 Taverna Apps. All rights reserved.
//
//  This file was generated by Mobiplus Clean
//

import Alamofire
import AlamofireImage
import Domain
import UIKit

class PullRequestDetailsViewController: UIViewController {
    @IBOutlet private var containerView: UIView!
    @IBOutlet private var authorLabel: UILabel!
    @IBOutlet private var titleLabel: UILabel!
    @IBOutlet private var descriptionLabel: UILabel!
    @IBOutlet private var dateLabel: UILabel!
    @IBOutlet private var imageView: UIImageView!
    @IBOutlet private var commentsLabel: UILabel!
    @IBOutlet private var commitsLabel: UILabel!
    @IBOutlet private var additionsLabel: UILabel!
    @IBOutlet private var deletionsLabel: UILabel!
    @IBOutlet private var changedFilesLabel: UILabel!

    final class func initWith(viewModel: PullRequestDetailsViewModelInterface, id: Int, repo: GitRepository) -> PullRequestDetailsViewController {
        let vc = PullRequestDetailsViewController()
        vc.viewModel = viewModel
        vc.id = id
        vc.repo = repo
        return vc
    }

    private(set) var viewModel: PullRequestDetailsViewModelInterface!
    private(set) var id: Int!
    private(set) var repo: GitRepository!

    fileprivate func populateView(data: GitPullRequest?) {
        guard let data = data else {
            return
        }

        titleLabel.text = data.title
        authorLabel.text = data.author
        descriptionLabel.text = data.description
        commitsLabel.text = "Commits: \(data.commitsCount)"
        commentsLabel.text = "Comments: \(data.commentsCount)"
        additionsLabel.text = "Additions: \(data.additionsCount)"
        deletionsLabel.text = "Deletions: \(data.deletionsCount)"
        changedFilesLabel.text = "Changed Files: \(data.changedFilesCount)"
        dateLabel.text = data.date!.string(format: .ddMMyyyyHHmmss)

        if let url = try? data.image.asURL() {
            imageView.loadCircleImage(url: url)
        }
    }

    fileprivate func showError(message: String?) {
        guard let message = message else {
            return
        }

        let alert = UIAlertController(title: "Error", message: message, preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "OK", style: UIAlertAction.Style.default, handler: nil))
        present(alert, animated: true, completion: nil)
    }

    fileprivate func handleIsLoading(_ isLoading: Bool) {
        if isLoading {
            showLoadingIndicator(text: "Loading")
        } else {
            removeLoadingIndicator()
        }
    }

    fileprivate func bindToViewModel() {
        viewModel.isLoading.observe(listener: handleIsLoading)
        viewModel.failMessage.observe(listener: showError)
        viewModel.pullRequest.observe(listener: populateView)
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Pull Request Detail"
        viewModel.load(pullRequestid: id, fromRepo: repo)
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        bindToViewModel()
    }
}
