//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
    fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
    fileprivate static let hostingBundle = Bundle(for: R.Class.self)

    /// Find first language and bundle for which the table exists
    fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
        // Filter preferredLanguages to localizations, use first locale
        var languages = preferredLanguages
            .map(Locale.init)
            .prefix(1)
            .flatMap { locale -> [String] in
                if hostingBundle.localizations.contains(locale.identifier) {
                    if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
                        return [locale.identifier, language]
                    } else {
                        return [locale.identifier]
                    }
                } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
                    return [language]
                } else {
                    return []
                }
            }

        // If there's no languages, use development language as backstop
        if languages.isEmpty {
            if let developmentLocalization = hostingBundle.developmentLocalization {
                languages = [developmentLocalization]
            }
        } else {
            // Insert Base as second item (between locale identifier and languageCode)
            languages.insert("Base", at: 1)

            // Add development language as backstop
            if let developmentLocalization = hostingBundle.developmentLocalization {
                languages.append(developmentLocalization)
            }
        }

        // Find first language for which table exists
        // Note: key might not exist in chosen language (in that case, key will be shown)
        for language in languages {
            if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
                let lbundle = Bundle(url: lproj) {
                let strings = lbundle.url(forResource: tableName, withExtension: "strings")
                let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

                if strings != nil || stringsdict != nil {
                    return (Locale(identifier: language), lbundle)
                }
            }
        }

        // If table is available in main bundle, don't look for localized resources
        let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
        let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

        if strings != nil || stringsdict != nil {
            return (applicationLocale, hostingBundle)
        }

        // If table is not found for requested languages, key will be shown
        return nil
    }

    /// Load string from Info.plist file
    fileprivate static func infoPlistString(path: [String], key: String) -> String? {
        var dict = hostingBundle.infoDictionary
        for step in path {
            guard let obj = dict?[step] as? [String: Any] else { return nil }
            dict = obj
        }
        return dict?[key] as? String
    }

    static func validate() throws {
        try intern.validate()
    }

    #if os(iOS) || os(tvOS)
        /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
        struct storyboard {
            /// Storyboard `LaunchScreen`.
            static let launchScreen = _R.storyboard.launchScreen()

            #if os(iOS) || os(tvOS)
                /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
                static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
                    return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
                }
            #endif

            fileprivate init() {}
        }
    #endif

    /// This `R.file` struct is generated, and contains static references to 2 files.
    struct file {
        /// Resource file `GoogleService-Info.plist`.
        static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
        /// Resource file `unittests.xctestplan`.
        static let unittestsXctestplan = Rswift.FileResource(bundle: R.hostingBundle, name: "unittests", pathExtension: "xctestplan")

        /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
        static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.googleServiceInfoPlist
            return fileResource.bundle.url(forResource: fileResource)
        }

        /// `bundle.url(forResource: "unittests", withExtension: "xctestplan")`
        static func unittestsXctestplan(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.unittestsXctestplan
            return fileResource.bundle.url(forResource: fileResource)
        }

        fileprivate init() {}
    }

    /// This `R.id` struct is generated, and contains static references to accessibility identifiers.
    struct id {
        struct gitRepositoriesTableViewCell {
            /// Accessibility identifier `RepositoryTableViewCell.ReliabilityIcon`.
            static let repositoryTableViewCellReliabilityIcon: String = "RepositoryTableViewCell.ReliabilityIcon"

            fileprivate init() {}
        }

        fileprivate init() {}
    }

    /// This `R.nib` struct is generated, and contains static references to 6 nibs.
    struct nib {
        /// Nib `APIErrorViewController`.
        static let apiErrorViewController = _R.nib._APIErrorViewController()
        /// Nib `GitPullRequestDetailsViewController`.
        static let gitPullRequestDetailsViewController = _R.nib._GitPullRequestDetailsViewController()
        /// Nib `GitPullRequestsListViewController`.
        static let gitPullRequestsListViewController = _R.nib._GitPullRequestsListViewController()
        /// Nib `GitPullRequestsTableViewCell`.
        static let gitPullRequestsTableViewCell = _R.nib._GitPullRequestsTableViewCell()
        /// Nib `GitRepositoriesListViewController`.
        static let gitRepositoriesListViewController = _R.nib._GitRepositoriesListViewController()
        /// Nib `GitRepositoriesTableViewCell`.
        static let gitRepositoriesTableViewCell = _R.nib._GitRepositoriesTableViewCell()

        #if os(iOS) || os(tvOS)
            /// `UINib(name: "APIErrorViewController", in: bundle)`
            @available(*, deprecated, message: "Use UINib(resource: R.nib.apiErrorViewController) instead")
            static func apiErrorViewController(_: Void = ()) -> UIKit.UINib {
                return UIKit.UINib(resource: R.nib.apiErrorViewController)
            }
        #endif

        #if os(iOS) || os(tvOS)
            /// `UINib(name: "GitPullRequestDetailsViewController", in: bundle)`
            @available(*, deprecated, message: "Use UINib(resource: R.nib.gitPullRequestDetailsViewController) instead")
            static func gitPullRequestDetailsViewController(_: Void = ()) -> UIKit.UINib {
                return UIKit.UINib(resource: R.nib.gitPullRequestDetailsViewController)
            }
        #endif

        #if os(iOS) || os(tvOS)
            /// `UINib(name: "GitPullRequestsListViewController", in: bundle)`
            @available(*, deprecated, message: "Use UINib(resource: R.nib.gitPullRequestsListViewController) instead")
            static func gitPullRequestsListViewController(_: Void = ()) -> UIKit.UINib {
                return UIKit.UINib(resource: R.nib.gitPullRequestsListViewController)
            }
        #endif

        #if os(iOS) || os(tvOS)
            /// `UINib(name: "GitPullRequestsTableViewCell", in: bundle)`
            @available(*, deprecated, message: "Use UINib(resource: R.nib.gitPullRequestsTableViewCell) instead")
            static func gitPullRequestsTableViewCell(_: Void = ()) -> UIKit.UINib {
                return UIKit.UINib(resource: R.nib.gitPullRequestsTableViewCell)
            }
        #endif

        #if os(iOS) || os(tvOS)
            /// `UINib(name: "GitRepositoriesListViewController", in: bundle)`
            @available(*, deprecated, message: "Use UINib(resource: R.nib.gitRepositoriesListViewController) instead")
            static func gitRepositoriesListViewController(_: Void = ()) -> UIKit.UINib {
                return UIKit.UINib(resource: R.nib.gitRepositoriesListViewController)
            }
        #endif

        #if os(iOS) || os(tvOS)
            /// `UINib(name: "GitRepositoriesTableViewCell", in: bundle)`
            @available(*, deprecated, message: "Use UINib(resource: R.nib.gitRepositoriesTableViewCell) instead")
            static func gitRepositoriesTableViewCell(_: Void = ()) -> UIKit.UINib {
                return UIKit.UINib(resource: R.nib.gitRepositoriesTableViewCell)
            }
        #endif

        static func apiErrorViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
            return R.nib.apiErrorViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
        }

        static func gitPullRequestDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
            return R.nib.gitPullRequestDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
        }

        static func gitPullRequestsListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
            return R.nib.gitPullRequestsListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
        }

        static func gitPullRequestsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> GitPullRequestsTableViewCell? {
            return R.nib.gitPullRequestsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GitPullRequestsTableViewCell
        }

        static func gitRepositoriesListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
            return R.nib.gitRepositoriesListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
        }

        static func gitRepositoriesTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> GitRepositoriesTableViewCell? {
            return R.nib.gitRepositoriesTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GitRepositoriesTableViewCell
        }

        fileprivate init() {}
    }

    /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
    struct reuseIdentifier {
        /// Reuse identifier `GitPullRequestsTableViewCell`.
        static let gitPullRequestsTableViewCell: Rswift.ReuseIdentifier<GitPullRequestsTableViewCell> = Rswift.ReuseIdentifier(identifier: "GitPullRequestsTableViewCell")
        /// Reuse identifier `RepositoriesTableViewCell`.
        static let repositoriesTableViewCell: Rswift.ReuseIdentifier<GitRepositoriesTableViewCell> = Rswift.ReuseIdentifier(identifier: "RepositoriesTableViewCell")

        fileprivate init() {}
    }

    fileprivate struct intern: Rswift.Validatable {
        fileprivate static func validate() throws {
            try _R.validate()
        }

        fileprivate init() {}
    }

    fileprivate class Class {}

    fileprivate init() {}
}

struct _R: Rswift.Validatable {
    static func validate() throws {
        #if os(iOS) || os(tvOS)
            try nib.validate()
        #endif
        #if os(iOS) || os(tvOS)
            try storyboard.validate()
        #endif
    }

    #if os(iOS) || os(tvOS)
        struct nib: Rswift.Validatable {
            static func validate() throws {
                try _APIErrorViewController.validate()
                try _GitRepositoriesTableViewCell.validate()
            }

            struct _APIErrorViewController: Rswift.NibResourceType, Rswift.Validatable {
                let bundle = R.hostingBundle
                let name = "APIErrorViewController"

                func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
                    return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
                }

                static func validate() throws {
                    if UIKit.UIImage(named: "exclamationmark.shield.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'exclamationmark.shield.fill' is used in nib 'APIErrorViewController', but couldn't be loaded.") }
                    if #available(iOS 11.0, tvOS 11.0, *) {}
                }

                fileprivate init() {}
            }

            struct _GitPullRequestDetailsViewController: Rswift.NibResourceType {
                let bundle = R.hostingBundle
                let name = "GitPullRequestDetailsViewController"

                func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
                    return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
                }

                fileprivate init() {}
            }

            struct _GitPullRequestsListViewController: Rswift.NibResourceType {
                let bundle = R.hostingBundle
                let name = "GitPullRequestsListViewController"

                func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
                    return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
                }

                fileprivate init() {}
            }

            struct _GitPullRequestsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
                typealias ReusableType = GitPullRequestsTableViewCell

                let bundle = R.hostingBundle
                let identifier = "GitPullRequestsTableViewCell"
                let name = "GitPullRequestsTableViewCell"

                func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> GitPullRequestsTableViewCell? {
                    return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GitPullRequestsTableViewCell
                }

                fileprivate init() {}
            }

            struct _GitRepositoriesListViewController: Rswift.NibResourceType {
                let bundle = R.hostingBundle
                let name = "GitRepositoriesListViewController"

                func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
                    return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
                }

                fileprivate init() {}
            }

            struct _GitRepositoriesTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
                typealias ReusableType = GitRepositoriesTableViewCell

                let bundle = R.hostingBundle
                let identifier = "RepositoriesTableViewCell"
                let name = "GitRepositoriesTableViewCell"

                func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> GitRepositoriesTableViewCell? {
                    return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GitRepositoriesTableViewCell
                }

                static func validate() throws {
                    if UIKit.UIImage(named: "exclamationmark.circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'exclamationmark.circle' is used in nib 'GitRepositoriesTableViewCell', but couldn't be loaded.") }
                    if UIKit.UIImage(named: "gear", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gear' is used in nib 'GitRepositoriesTableViewCell', but couldn't be loaded.") }
                    if UIKit.UIImage(named: "star.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star.fill' is used in nib 'GitRepositoriesTableViewCell', but couldn't be loaded.") }
                    if UIKit.UIImage(named: "tuningfork", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tuningfork' is used in nib 'GitRepositoriesTableViewCell', but couldn't be loaded.") }
                    if #available(iOS 11.0, tvOS 11.0, *) {}
                }

                fileprivate init() {}
            }

            fileprivate init() {}
        }
    #endif

    #if os(iOS) || os(tvOS)
        struct storyboard: Rswift.Validatable {
            static func validate() throws {
                #if os(iOS) || os(tvOS)
                    try launchScreen.validate()
                #endif
            }

            #if os(iOS) || os(tvOS)
                struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
                    typealias InitialController = UIKit.UIViewController

                    let bundle = R.hostingBundle
                    let name = "LaunchScreen"

                    static func validate() throws {
                        if #available(iOS 11.0, tvOS 11.0, *) {}
                    }

                    fileprivate init() {}
                }
            #endif

            fileprivate init() {}
        }
    #endif

    fileprivate init() {}
}
